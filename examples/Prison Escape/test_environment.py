"""
Script de test simple pour v√©rifier le fonctionnement de l'environnement Prison Escape
Ce script teste la connectivit√© GAMA et l'environnement de base
"""

import asyncio
import sys
from pathlib import Path

from gama_pettingzoo.gama_parallel_env import GamaParallelEnv

async def test_basic_connection():
    """Test de connexion basique √† GAMA"""
    print("=== TEST DE CONNEXION GAMA ===")
    
    exp_path = str(Path(__file__).parents[0] / "controler.gaml")
    print(f"Chemin exp√©rience: {exp_path}")
    
    try:
        env = GamaParallelEnv(
            gaml_experiment_path=exp_path,
            gaml_experiment_name="main",
            gama_ip_address="localhost",
            gama_port=1001
        )
        
        print("‚úì Environnement cr√©√© avec succ√®s")
        
        # Test de reset
        obs, infos = env.reset()
        print(f"‚úì Reset r√©ussi")
        print(f"Agents d√©tect√©s: {list(obs.keys())}")
        print(f"Observations: {obs}")
        
        # Test de quelques √©tapes
        print("\n=== TEST DE QUELQUES √âTAPES ===")
        for step in range(3):
            actions = {agent: env.action_space(agent).sample() for agent in env.agents}
            obs, rewards, terminations, truncations, info = env.step(actions)
            
            print(f"√âtape {step + 1}:")
            print(f"  Actions: {actions}")
            print(f"  R√©compenses: {rewards}")
            print(f"  Terminations: {terminations}")
            print(f"  Observations: {obs}")
            
            if any(terminations.values()):
                print("  Episode termin√©")
                break
        
        env.close()
        print("‚úì Test termin√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test: {e}")
        return False

async def test_action_spaces():
    """Test des espaces d'action et d'observation"""
    print("\n=== TEST DES ESPACES D'ACTION ===")
    
    exp_path = str(Path(__file__).parents[0] / "controler.gaml")
    
    try:
        env = GamaParallelEnv(
            gaml_experiment_path=exp_path,
            gaml_experiment_name="main",
            gama_ip_address="localhost",
            gama_port=1001
        )
        
        obs, infos = env.reset()
        
        for agent in env.agents:
            action_space = env.action_space(agent)
            observation_space = env.observation_space(agent)
            
            print(f"Agent: {agent}")
            print(f"  Espace d'action: {action_space}")
            print(f"  Espace d'observation: {observation_space}")
            print(f"  Observation actuelle: {obs[agent]}")
            
            # Test d'actions sp√©cifiques
            for action in range(4):  # 0, 1, 2, 3
                print(f"  Action {action} valide: {action in action_space}")
        
        env.close()
        print("‚úì Test des espaces termin√©")
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test des espaces: {e}")
        return False

async def test_complete_episode():
    """Test d'un √©pisode complet"""
    print("\n=== TEST D'UN √âPISODE COMPLET ===")
    
    exp_path = str(Path(__file__).parents[0] / "controler.gaml")
    
    try:
        env = GamaParallelEnv(
            gaml_experiment_path=exp_path,
            gaml_experiment_name="main",
            gama_ip_address="localhost",
            gama_port=1001
        )
        
        obs, infos = env.reset()
        step_count = 0
        max_steps = 50
        
        print(f"D√©but de l'√©pisode (max {max_steps} √©tapes)")
        
        while env.agents and step_count < max_steps:
            # Actions al√©atoires
            actions = {agent: env.action_space(agent).sample() for agent in env.agents}
            
            obs, rewards, terminations, truncations, info = env.step(actions)
            step_count += 1
            
            print(f"√âtape {step_count}: Actions={actions}, R√©compenses={rewards}")
            
            if any(terminations.values()) or any(truncations.values()):
                print(f"√âpisode termin√© √† l'√©tape {step_count}")
                if any(rewards.values()):
                    winner = max(rewards.keys(), key=lambda k: rewards[k])
                    print(f"Gagnant: {winner} (r√©compense: {rewards[winner]})")
                break
        
        if step_count >= max_steps:
            print(f"√âpisode termin√© par limite de temps ({max_steps} √©tapes)")
        
        env.close()
        print("‚úì Test d'√©pisode complet termin√©")
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors du test d'√©pisode: {e}")
        return False

def check_file_exists():
    """V√©rifie que les fichiers n√©cessaires existent"""
    print("=== V√âRIFICATION DES FICHIERS ===")
    
    files_to_check = [
        "controler.gaml",
        "PrisonEscape.gaml"
    ]
    
    all_exist = True
    for filename in files_to_check:
        filepath = Path(__file__).parents[0] / filename
        if filepath.exists():
            print(f"‚úì {filename} trouv√©")
        else:
            print(f"‚úó {filename} manquant: {filepath}")
            all_exist = False
    
    return all_exist

async def main():
    """Fonction principale de test"""
    print("=" * 60)
    print("TESTS DE L'ENVIRONNEMENT PRISON ESCAPE")
    print("=" * 60)
    
    # V√©rification des fichiers
    if not check_file_exists():
        print("\n‚úó Des fichiers n√©cessaires sont manquants. Arr√™t des tests.")
        sys.exit(1)
    
    # Tests
    tests = [
        ("Connexion basique", test_basic_connection),
        ("Espaces d'action", test_action_spaces),
        ("√âpisode complet", test_complete_episode)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name.upper()} {'='*20}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "="*60)
    print("R√âSUM√â DES TESTS")
    print("="*60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úì R√âUSSI" if result else "‚úó √âCHOU√â"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nTests r√©ussis: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ Tous les tests sont pass√©s! L'environnement est pr√™t pour l'entra√Ænement.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration GAMA.")
    
    print("\nConseils:")
    print("- Assurez-vous que GAMA est lanc√© sur le port 1001")
    print("- V√©rifiez que les fichiers .gaml sont dans le bon r√©pertoire")
    print("- Pour l'entra√Ænement simple: python simple_train_prison_escape.py")

if __name__ == "__main__":
    asyncio.run(main())
